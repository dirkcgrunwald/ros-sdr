// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdr_data.proto

#ifndef PROTOBUF_sdr_5fdata_2eproto__INCLUDED
#define PROTOBUF_sdr_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ros_sdr_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sdr_5fdata_2eproto();
void protobuf_AssignDesc_sdr_5fdata_2eproto();
void protobuf_ShutdownFile_sdr_5fdata_2eproto();

class hackrf_config;
class rtlsdr_config;
class Point;
class Quaternion;
class Pose;
class NavSatStatus;
class timestamp;
class sdr_config_payload;
class iq_payload;

// ===================================================================

class hackrf_config : public ::google::protobuf::Message {
 public:
  hackrf_config();
  virtual ~hackrf_config();

  hackrf_config(const hackrf_config& from);

  inline hackrf_config& operator=(const hackrf_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hackrf_config& default_instance();

  void Swap(hackrf_config* other);

  // implements Message ----------------------------------------------

  hackrf_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hackrf_config& from);
  void MergeFrom(const hackrf_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 frequency = 1;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 1;
  inline ::google::protobuf::int64 frequency() const;
  inline void set_frequency(::google::protobuf::int64 value);

  // required double sample_rate = 2;
  inline bool has_sample_rate() const;
  inline void clear_sample_rate();
  static const int kSampleRateFieldNumber = 2;
  inline double sample_rate() const;
  inline void set_sample_rate(double value);

  // optional int32 baseband_filter_bw_hz = 3;
  inline bool has_baseband_filter_bw_hz() const;
  inline void clear_baseband_filter_bw_hz();
  static const int kBasebandFilterBwHzFieldNumber = 3;
  inline ::google::protobuf::int32 baseband_filter_bw_hz() const;
  inline void set_baseband_filter_bw_hz(::google::protobuf::int32 value);

  // optional int32 lnaGain = 4;
  inline bool has_lnagain() const;
  inline void clear_lnagain();
  static const int kLnaGainFieldNumber = 4;
  inline ::google::protobuf::int32 lnagain() const;
  inline void set_lnagain(::google::protobuf::int32 value);

  // optional int32 vgaGain = 5;
  inline bool has_vgagain() const;
  inline void clear_vgagain();
  static const int kVgaGainFieldNumber = 5;
  inline ::google::protobuf::int32 vgagain() const;
  inline void set_vgagain(::google::protobuf::int32 value);

  // optional bool ampEnable = 6;
  inline bool has_ampenable() const;
  inline void clear_ampenable();
  static const int kAmpEnableFieldNumber = 6;
  inline bool ampenable() const;
  inline void set_ampenable(bool value);

  // optional bool antennaEnable = 7;
  inline bool has_antennaenable() const;
  inline void clear_antennaenable();
  static const int kAntennaEnableFieldNumber = 7;
  inline bool antennaenable() const;
  inline void set_antennaenable(bool value);

  // optional int32 txvgaGain = 8;
  inline bool has_txvgagain() const;
  inline void clear_txvgagain();
  static const int kTxvgaGainFieldNumber = 8;
  inline ::google::protobuf::int32 txvgagain() const;
  inline void set_txvgagain(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ros_sdr_proto.hackrf_config)
 private:
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_sample_rate();
  inline void clear_has_sample_rate();
  inline void set_has_baseband_filter_bw_hz();
  inline void clear_has_baseband_filter_bw_hz();
  inline void set_has_lnagain();
  inline void clear_has_lnagain();
  inline void set_has_vgagain();
  inline void clear_has_vgagain();
  inline void set_has_ampenable();
  inline void clear_has_ampenable();
  inline void set_has_antennaenable();
  inline void clear_has_antennaenable();
  inline void set_has_txvgagain();
  inline void clear_has_txvgagain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 frequency_;
  double sample_rate_;
  ::google::protobuf::int32 baseband_filter_bw_hz_;
  ::google::protobuf::int32 lnagain_;
  ::google::protobuf::int32 vgagain_;
  bool ampenable_;
  bool antennaenable_;
  ::google::protobuf::int32 txvgagain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_sdr_5fdata_2eproto();
  friend void protobuf_AssignDesc_sdr_5fdata_2eproto();
  friend void protobuf_ShutdownFile_sdr_5fdata_2eproto();

  void InitAsDefaultInstance();
  static hackrf_config* default_instance_;
};
// -------------------------------------------------------------------

class rtlsdr_config : public ::google::protobuf::Message {
 public:
  rtlsdr_config();
  virtual ~rtlsdr_config();

  rtlsdr_config(const rtlsdr_config& from);

  inline rtlsdr_config& operator=(const rtlsdr_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rtlsdr_config& default_instance();

  void Swap(rtlsdr_config* other);

  // implements Message ----------------------------------------------

  rtlsdr_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rtlsdr_config& from);
  void MergeFrom(const rtlsdr_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 frequency = 1;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 1;
  inline ::google::protobuf::int64 frequency() const;
  inline void set_frequency(::google::protobuf::int64 value);

  // required uint32 sample_rate = 2;
  inline bool has_sample_rate() const;
  inline void clear_sample_rate();
  static const int kSampleRateFieldNumber = 2;
  inline ::google::protobuf::uint32 sample_rate() const;
  inline void set_sample_rate(::google::protobuf::uint32 value);

  // optional int32 gain = 3;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 3;
  inline ::google::protobuf::int32 gain() const;
  inline void set_gain(::google::protobuf::int32 value);

  // optional int32 ppm_error = 4;
  inline bool has_ppm_error() const;
  inline void clear_ppm_error();
  static const int kPpmErrorFieldNumber = 4;
  inline ::google::protobuf::int32 ppm_error() const;
  inline void set_ppm_error(::google::protobuf::int32 value);

  // optional bool gainmode = 5;
  inline bool has_gainmode() const;
  inline void clear_gainmode();
  static const int kGainmodeFieldNumber = 5;
  inline bool gainmode() const;
  inline void set_gainmode(bool value);

  // optional bool dithering = 6;
  inline bool has_dithering() const;
  inline void clear_dithering();
  static const int kDitheringFieldNumber = 6;
  inline bool dithering() const;
  inline void set_dithering(bool value);

  // optional bool direct_sampleing = 7;
  inline bool has_direct_sampleing() const;
  inline void clear_direct_sampleing();
  static const int kDirectSampleingFieldNumber = 7;
  inline bool direct_sampleing() const;
  inline void set_direct_sampleing(bool value);

  // @@protoc_insertion_point(class_scope:ros_sdr_proto.rtlsdr_config)
 private:
  inline void set_has_frequency();
  inline void clear_has_frequency();
  inline void set_has_sample_rate();
  inline void clear_has_sample_rate();
  inline void set_has_gain();
  inline void clear_has_gain();
  inline void set_has_ppm_error();
  inline void clear_has_ppm_error();
  inline void set_has_gainmode();
  inline void clear_has_gainmode();
  inline void set_has_dithering();
  inline void clear_has_dithering();
  inline void set_has_direct_sampleing();
  inline void clear_has_direct_sampleing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 frequency_;
  ::google::protobuf::uint32 sample_rate_;
  ::google::protobuf::int32 gain_;
  ::google::protobuf::int32 ppm_error_;
  bool gainmode_;
  bool dithering_;
  bool direct_sampleing_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_sdr_5fdata_2eproto();
  friend void protobuf_AssignDesc_sdr_5fdata_2eproto();
  friend void protobuf_ShutdownFile_sdr_5fdata_2eproto();

  void InitAsDefaultInstance();
  static rtlsdr_config* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:ros_sdr_proto.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double x_;
  double y_;
  double z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_sdr_5fdata_2eproto();
  friend void protobuf_AssignDesc_sdr_5fdata_2eproto();
  friend void protobuf_ShutdownFile_sdr_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Quaternion : public ::google::protobuf::Message {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaternion& default_instance();

  void Swap(Quaternion* other);

  // implements Message ----------------------------------------------

  Quaternion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // required double w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline double w() const;
  inline void set_w(double value);

  // @@protoc_insertion_point(class_scope:ros_sdr_proto.Quaternion)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double x_;
  double y_;
  double z_;
  double w_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_sdr_5fdata_2eproto();
  friend void protobuf_AssignDesc_sdr_5fdata_2eproto();
  friend void protobuf_ShutdownFile_sdr_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Quaternion* default_instance_;
};
// -------------------------------------------------------------------

class Pose : public ::google::protobuf::Message {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  void Swap(Pose* other);

  // implements Message ----------------------------------------------

  Pose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ros_sdr_proto.Point position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::ros_sdr_proto::Point& position() const;
  inline ::ros_sdr_proto::Point* mutable_position();
  inline ::ros_sdr_proto::Point* release_position();
  inline void set_allocated_position(::ros_sdr_proto::Point* position);

  // required .ros_sdr_proto.Quaternion orientation = 2;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  inline const ::ros_sdr_proto::Quaternion& orientation() const;
  inline ::ros_sdr_proto::Quaternion* mutable_orientation();
  inline ::ros_sdr_proto::Quaternion* release_orientation();
  inline void set_allocated_orientation(::ros_sdr_proto::Quaternion* orientation);

  // required double latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required double altitude = 5;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 5;
  inline double altitude() const;
  inline void set_altitude(double value);

  // repeated double position_covariance = 6;
  inline int position_covariance_size() const;
  inline void clear_position_covariance();
  static const int kPositionCovarianceFieldNumber = 6;
  inline double position_covariance(int index) const;
  inline void set_position_covariance(int index, double value);
  inline void add_position_covariance(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      position_covariance() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_position_covariance();

  // @@protoc_insertion_point(class_scope:ros_sdr_proto.Pose)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_altitude();
  inline void clear_has_altitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ros_sdr_proto::Point* position_;
  ::ros_sdr_proto::Quaternion* orientation_;
  double latitude_;
  double longitude_;
  double altitude_;
  ::google::protobuf::RepeatedField< double > position_covariance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_sdr_5fdata_2eproto();
  friend void protobuf_AssignDesc_sdr_5fdata_2eproto();
  friend void protobuf_ShutdownFile_sdr_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Pose* default_instance_;
};
// -------------------------------------------------------------------

class NavSatStatus : public ::google::protobuf::Message {
 public:
  NavSatStatus();
  virtual ~NavSatStatus();

  NavSatStatus(const NavSatStatus& from);

  inline NavSatStatus& operator=(const NavSatStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NavSatStatus& default_instance();

  void Swap(NavSatStatus* other);

  // implements Message ----------------------------------------------

  NavSatStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NavSatStatus& from);
  void MergeFrom(const NavSatStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required uint32 service = 2;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 2;
  inline ::google::protobuf::uint32 service() const;
  inline void set_service(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ros_sdr_proto.NavSatStatus)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_service();
  inline void clear_has_service();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 service_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sdr_5fdata_2eproto();
  friend void protobuf_AssignDesc_sdr_5fdata_2eproto();
  friend void protobuf_ShutdownFile_sdr_5fdata_2eproto();

  void InitAsDefaultInstance();
  static NavSatStatus* default_instance_;
};
// -------------------------------------------------------------------

class timestamp : public ::google::protobuf::Message {
 public:
  timestamp();
  virtual ~timestamp();

  timestamp(const timestamp& from);

  inline timestamp& operator=(const timestamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const timestamp& default_instance();

  void Swap(timestamp* other);

  // implements Message ----------------------------------------------

  timestamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const timestamp& from);
  void MergeFrom(const timestamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sec = 1;
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 1;
  inline ::google::protobuf::uint32 sec() const;
  inline void set_sec(::google::protobuf::uint32 value);

  // required uint32 nsec = 2;
  inline bool has_nsec() const;
  inline void clear_nsec();
  static const int kNsecFieldNumber = 2;
  inline ::google::protobuf::uint32 nsec() const;
  inline void set_nsec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ros_sdr_proto.timestamp)
 private:
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_nsec();
  inline void clear_has_nsec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sec_;
  ::google::protobuf::uint32 nsec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sdr_5fdata_2eproto();
  friend void protobuf_AssignDesc_sdr_5fdata_2eproto();
  friend void protobuf_ShutdownFile_sdr_5fdata_2eproto();

  void InitAsDefaultInstance();
  static timestamp* default_instance_;
};
// -------------------------------------------------------------------

class sdr_config_payload : public ::google::protobuf::Message {
 public:
  sdr_config_payload();
  virtual ~sdr_config_payload();

  sdr_config_payload(const sdr_config_payload& from);

  inline sdr_config_payload& operator=(const sdr_config_payload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sdr_config_payload& default_instance();

  void Swap(sdr_config_payload* other);

  // implements Message ----------------------------------------------

  sdr_config_payload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sdr_config_payload& from);
  void MergeFrom(const sdr_config_payload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ros_sdr_proto.timestamp stamp = 1;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 1;
  inline const ::ros_sdr_proto::timestamp& stamp() const;
  inline ::ros_sdr_proto::timestamp* mutable_stamp();
  inline ::ros_sdr_proto::timestamp* release_stamp();
  inline void set_allocated_stamp(::ros_sdr_proto::timestamp* stamp);

  // optional .ros_sdr_proto.hackrf_config hackrf = 2;
  inline bool has_hackrf() const;
  inline void clear_hackrf();
  static const int kHackrfFieldNumber = 2;
  inline const ::ros_sdr_proto::hackrf_config& hackrf() const;
  inline ::ros_sdr_proto::hackrf_config* mutable_hackrf();
  inline ::ros_sdr_proto::hackrf_config* release_hackrf();
  inline void set_allocated_hackrf(::ros_sdr_proto::hackrf_config* hackrf);

  // optional .ros_sdr_proto.rtlsdr_config rtlsdr = 3;
  inline bool has_rtlsdr() const;
  inline void clear_rtlsdr();
  static const int kRtlsdrFieldNumber = 3;
  inline const ::ros_sdr_proto::rtlsdr_config& rtlsdr() const;
  inline ::ros_sdr_proto::rtlsdr_config* mutable_rtlsdr();
  inline ::ros_sdr_proto::rtlsdr_config* release_rtlsdr();
  inline void set_allocated_rtlsdr(::ros_sdr_proto::rtlsdr_config* rtlsdr);

  // optional .ros_sdr_proto.Pose pose = 6;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 6;
  inline const ::ros_sdr_proto::Pose& pose() const;
  inline ::ros_sdr_proto::Pose* mutable_pose();
  inline ::ros_sdr_proto::Pose* release_pose();
  inline void set_allocated_pose(::ros_sdr_proto::Pose* pose);

  // optional .ros_sdr_proto.NavSatStatus status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline const ::ros_sdr_proto::NavSatStatus& status() const;
  inline ::ros_sdr_proto::NavSatStatus* mutable_status();
  inline ::ros_sdr_proto::NavSatStatus* release_status();
  inline void set_allocated_status(::ros_sdr_proto::NavSatStatus* status);

  // required bool iq_compressed = 8 [default = true];
  inline bool has_iq_compressed() const;
  inline void clear_iq_compressed();
  static const int kIqCompressedFieldNumber = 8;
  inline bool iq_compressed() const;
  inline void set_iq_compressed(bool value);

  // optional double temperature = 9;
  inline bool has_temperature() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 9;
  inline double temperature() const;
  inline void set_temperature(double value);

  // @@protoc_insertion_point(class_scope:ros_sdr_proto.sdr_config_payload)
 private:
  inline void set_has_stamp();
  inline void clear_has_stamp();
  inline void set_has_hackrf();
  inline void clear_has_hackrf();
  inline void set_has_rtlsdr();
  inline void clear_has_rtlsdr();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_iq_compressed();
  inline void clear_has_iq_compressed();
  inline void set_has_temperature();
  inline void clear_has_temperature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::ros_sdr_proto::timestamp* stamp_;
  ::ros_sdr_proto::hackrf_config* hackrf_;
  ::ros_sdr_proto::rtlsdr_config* rtlsdr_;
  ::ros_sdr_proto::Pose* pose_;
  ::ros_sdr_proto::NavSatStatus* status_;
  double temperature_;
  bool iq_compressed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_sdr_5fdata_2eproto();
  friend void protobuf_AssignDesc_sdr_5fdata_2eproto();
  friend void protobuf_ShutdownFile_sdr_5fdata_2eproto();

  void InitAsDefaultInstance();
  static sdr_config_payload* default_instance_;
};
// -------------------------------------------------------------------

class iq_payload : public ::google::protobuf::Message {
 public:
  iq_payload();
  virtual ~iq_payload();

  iq_payload(const iq_payload& from);

  inline iq_payload& operator=(const iq_payload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const iq_payload& default_instance();

  void Swap(iq_payload* other);

  // implements Message ----------------------------------------------

  iq_payload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const iq_payload& from);
  void MergeFrom(const iq_payload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 i = 4 [packed = true];
  inline int i_size() const;
  inline void clear_i();
  static const int kIFieldNumber = 4;
  inline ::google::protobuf::uint32 i(int index) const;
  inline void set_i(int index, ::google::protobuf::uint32 value);
  inline void add_i(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      i() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_i();

  // repeated uint32 q = 5 [packed = true];
  inline int q_size() const;
  inline void clear_q();
  static const int kQFieldNumber = 5;
  inline ::google::protobuf::uint32 q(int index) const;
  inline void set_q(int index, ::google::protobuf::uint32 value);
  inline void add_q(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      q() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_q();

  // @@protoc_insertion_point(class_scope:ros_sdr_proto.iq_payload)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > i_;
  mutable int _i_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > q_;
  mutable int _q_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sdr_5fdata_2eproto();
  friend void protobuf_AssignDesc_sdr_5fdata_2eproto();
  friend void protobuf_ShutdownFile_sdr_5fdata_2eproto();

  void InitAsDefaultInstance();
  static iq_payload* default_instance_;
};
// ===================================================================


// ===================================================================

// hackrf_config

// required int64 frequency = 1;
inline bool hackrf_config::has_frequency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hackrf_config::set_has_frequency() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hackrf_config::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hackrf_config::clear_frequency() {
  frequency_ = GOOGLE_LONGLONG(0);
  clear_has_frequency();
}
inline ::google::protobuf::int64 hackrf_config::frequency() const {
  return frequency_;
}
inline void hackrf_config::set_frequency(::google::protobuf::int64 value) {
  set_has_frequency();
  frequency_ = value;
}

// required double sample_rate = 2;
inline bool hackrf_config::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hackrf_config::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hackrf_config::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hackrf_config::clear_sample_rate() {
  sample_rate_ = 0;
  clear_has_sample_rate();
}
inline double hackrf_config::sample_rate() const {
  return sample_rate_;
}
inline void hackrf_config::set_sample_rate(double value) {
  set_has_sample_rate();
  sample_rate_ = value;
}

// optional int32 baseband_filter_bw_hz = 3;
inline bool hackrf_config::has_baseband_filter_bw_hz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hackrf_config::set_has_baseband_filter_bw_hz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hackrf_config::clear_has_baseband_filter_bw_hz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hackrf_config::clear_baseband_filter_bw_hz() {
  baseband_filter_bw_hz_ = 0;
  clear_has_baseband_filter_bw_hz();
}
inline ::google::protobuf::int32 hackrf_config::baseband_filter_bw_hz() const {
  return baseband_filter_bw_hz_;
}
inline void hackrf_config::set_baseband_filter_bw_hz(::google::protobuf::int32 value) {
  set_has_baseband_filter_bw_hz();
  baseband_filter_bw_hz_ = value;
}

// optional int32 lnaGain = 4;
inline bool hackrf_config::has_lnagain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hackrf_config::set_has_lnagain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hackrf_config::clear_has_lnagain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hackrf_config::clear_lnagain() {
  lnagain_ = 0;
  clear_has_lnagain();
}
inline ::google::protobuf::int32 hackrf_config::lnagain() const {
  return lnagain_;
}
inline void hackrf_config::set_lnagain(::google::protobuf::int32 value) {
  set_has_lnagain();
  lnagain_ = value;
}

// optional int32 vgaGain = 5;
inline bool hackrf_config::has_vgagain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hackrf_config::set_has_vgagain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hackrf_config::clear_has_vgagain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hackrf_config::clear_vgagain() {
  vgagain_ = 0;
  clear_has_vgagain();
}
inline ::google::protobuf::int32 hackrf_config::vgagain() const {
  return vgagain_;
}
inline void hackrf_config::set_vgagain(::google::protobuf::int32 value) {
  set_has_vgagain();
  vgagain_ = value;
}

// optional bool ampEnable = 6;
inline bool hackrf_config::has_ampenable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hackrf_config::set_has_ampenable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hackrf_config::clear_has_ampenable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hackrf_config::clear_ampenable() {
  ampenable_ = false;
  clear_has_ampenable();
}
inline bool hackrf_config::ampenable() const {
  return ampenable_;
}
inline void hackrf_config::set_ampenable(bool value) {
  set_has_ampenable();
  ampenable_ = value;
}

// optional bool antennaEnable = 7;
inline bool hackrf_config::has_antennaenable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void hackrf_config::set_has_antennaenable() {
  _has_bits_[0] |= 0x00000040u;
}
inline void hackrf_config::clear_has_antennaenable() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void hackrf_config::clear_antennaenable() {
  antennaenable_ = false;
  clear_has_antennaenable();
}
inline bool hackrf_config::antennaenable() const {
  return antennaenable_;
}
inline void hackrf_config::set_antennaenable(bool value) {
  set_has_antennaenable();
  antennaenable_ = value;
}

// optional int32 txvgaGain = 8;
inline bool hackrf_config::has_txvgagain() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void hackrf_config::set_has_txvgagain() {
  _has_bits_[0] |= 0x00000080u;
}
inline void hackrf_config::clear_has_txvgagain() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void hackrf_config::clear_txvgagain() {
  txvgagain_ = 0;
  clear_has_txvgagain();
}
inline ::google::protobuf::int32 hackrf_config::txvgagain() const {
  return txvgagain_;
}
inline void hackrf_config::set_txvgagain(::google::protobuf::int32 value) {
  set_has_txvgagain();
  txvgagain_ = value;
}

// -------------------------------------------------------------------

// rtlsdr_config

// required int64 frequency = 1;
inline bool rtlsdr_config::has_frequency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rtlsdr_config::set_has_frequency() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rtlsdr_config::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rtlsdr_config::clear_frequency() {
  frequency_ = GOOGLE_LONGLONG(0);
  clear_has_frequency();
}
inline ::google::protobuf::int64 rtlsdr_config::frequency() const {
  return frequency_;
}
inline void rtlsdr_config::set_frequency(::google::protobuf::int64 value) {
  set_has_frequency();
  frequency_ = value;
}

// required uint32 sample_rate = 2;
inline bool rtlsdr_config::has_sample_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rtlsdr_config::set_has_sample_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rtlsdr_config::clear_has_sample_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rtlsdr_config::clear_sample_rate() {
  sample_rate_ = 0u;
  clear_has_sample_rate();
}
inline ::google::protobuf::uint32 rtlsdr_config::sample_rate() const {
  return sample_rate_;
}
inline void rtlsdr_config::set_sample_rate(::google::protobuf::uint32 value) {
  set_has_sample_rate();
  sample_rate_ = value;
}

// optional int32 gain = 3;
inline bool rtlsdr_config::has_gain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rtlsdr_config::set_has_gain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rtlsdr_config::clear_has_gain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rtlsdr_config::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
inline ::google::protobuf::int32 rtlsdr_config::gain() const {
  return gain_;
}
inline void rtlsdr_config::set_gain(::google::protobuf::int32 value) {
  set_has_gain();
  gain_ = value;
}

// optional int32 ppm_error = 4;
inline bool rtlsdr_config::has_ppm_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rtlsdr_config::set_has_ppm_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rtlsdr_config::clear_has_ppm_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rtlsdr_config::clear_ppm_error() {
  ppm_error_ = 0;
  clear_has_ppm_error();
}
inline ::google::protobuf::int32 rtlsdr_config::ppm_error() const {
  return ppm_error_;
}
inline void rtlsdr_config::set_ppm_error(::google::protobuf::int32 value) {
  set_has_ppm_error();
  ppm_error_ = value;
}

// optional bool gainmode = 5;
inline bool rtlsdr_config::has_gainmode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rtlsdr_config::set_has_gainmode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rtlsdr_config::clear_has_gainmode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rtlsdr_config::clear_gainmode() {
  gainmode_ = false;
  clear_has_gainmode();
}
inline bool rtlsdr_config::gainmode() const {
  return gainmode_;
}
inline void rtlsdr_config::set_gainmode(bool value) {
  set_has_gainmode();
  gainmode_ = value;
}

// optional bool dithering = 6;
inline bool rtlsdr_config::has_dithering() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rtlsdr_config::set_has_dithering() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rtlsdr_config::clear_has_dithering() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rtlsdr_config::clear_dithering() {
  dithering_ = false;
  clear_has_dithering();
}
inline bool rtlsdr_config::dithering() const {
  return dithering_;
}
inline void rtlsdr_config::set_dithering(bool value) {
  set_has_dithering();
  dithering_ = value;
}

// optional bool direct_sampleing = 7;
inline bool rtlsdr_config::has_direct_sampleing() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void rtlsdr_config::set_has_direct_sampleing() {
  _has_bits_[0] |= 0x00000040u;
}
inline void rtlsdr_config::clear_has_direct_sampleing() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void rtlsdr_config::clear_direct_sampleing() {
  direct_sampleing_ = false;
  clear_has_direct_sampleing();
}
inline bool rtlsdr_config::direct_sampleing() const {
  return direct_sampleing_;
}
inline void rtlsdr_config::set_direct_sampleing(bool value) {
  set_has_direct_sampleing();
  direct_sampleing_ = value;
}

// -------------------------------------------------------------------

// Point

// required double x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point::x() const {
  return x_;
}
inline void Point::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point::y() const {
  return y_;
}
inline void Point::set_y(double value) {
  set_has_y();
  y_ = value;
}

// required double z = 3;
inline bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Point::z() const {
  return z_;
}
inline void Point::set_z(double value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// Quaternion

// required double x = 1;
inline bool Quaternion::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Quaternion::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Quaternion::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Quaternion::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Quaternion::x() const {
  return x_;
}
inline void Quaternion::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 2;
inline bool Quaternion::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Quaternion::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Quaternion::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Quaternion::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Quaternion::y() const {
  return y_;
}
inline void Quaternion::set_y(double value) {
  set_has_y();
  y_ = value;
}

// required double z = 3;
inline bool Quaternion::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Quaternion::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Quaternion::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Quaternion::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Quaternion::z() const {
  return z_;
}
inline void Quaternion::set_z(double value) {
  set_has_z();
  z_ = value;
}

// required double w = 4;
inline bool Quaternion::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Quaternion::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Quaternion::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Quaternion::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline double Quaternion::w() const {
  return w_;
}
inline void Quaternion::set_w(double value) {
  set_has_w();
  w_ = value;
}

// -------------------------------------------------------------------

// Pose

// required .ros_sdr_proto.Point position = 1;
inline bool Pose::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pose::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pose::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pose::clear_position() {
  if (position_ != NULL) position_->::ros_sdr_proto::Point::Clear();
  clear_has_position();
}
inline const ::ros_sdr_proto::Point& Pose::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::ros_sdr_proto::Point* Pose::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::ros_sdr_proto::Point;
  return position_;
}
inline ::ros_sdr_proto::Point* Pose::release_position() {
  clear_has_position();
  ::ros_sdr_proto::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Pose::set_allocated_position(::ros_sdr_proto::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// required .ros_sdr_proto.Quaternion orientation = 2;
inline bool Pose::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pose::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pose::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pose::clear_orientation() {
  if (orientation_ != NULL) orientation_->::ros_sdr_proto::Quaternion::Clear();
  clear_has_orientation();
}
inline const ::ros_sdr_proto::Quaternion& Pose::orientation() const {
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::ros_sdr_proto::Quaternion* Pose::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) orientation_ = new ::ros_sdr_proto::Quaternion;
  return orientation_;
}
inline ::ros_sdr_proto::Quaternion* Pose::release_orientation() {
  clear_has_orientation();
  ::ros_sdr_proto::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void Pose::set_allocated_orientation(::ros_sdr_proto::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
}

// required double latitude = 3;
inline bool Pose::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pose::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pose::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pose::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double Pose::latitude() const {
  return latitude_;
}
inline void Pose::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
}

// required double longitude = 4;
inline bool Pose::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pose::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pose::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pose::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double Pose::longitude() const {
  return longitude_;
}
inline void Pose::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
}

// required double altitude = 5;
inline bool Pose::has_altitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pose::set_has_altitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pose::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pose::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double Pose::altitude() const {
  return altitude_;
}
inline void Pose::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
}

// repeated double position_covariance = 6;
inline int Pose::position_covariance_size() const {
  return position_covariance_.size();
}
inline void Pose::clear_position_covariance() {
  position_covariance_.Clear();
}
inline double Pose::position_covariance(int index) const {
  return position_covariance_.Get(index);
}
inline void Pose::set_position_covariance(int index, double value) {
  position_covariance_.Set(index, value);
}
inline void Pose::add_position_covariance(double value) {
  position_covariance_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
Pose::position_covariance() const {
  return position_covariance_;
}
inline ::google::protobuf::RepeatedField< double >*
Pose::mutable_position_covariance() {
  return &position_covariance_;
}

// -------------------------------------------------------------------

// NavSatStatus

// required int32 status = 1;
inline bool NavSatStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavSatStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavSatStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavSatStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 NavSatStatus::status() const {
  return status_;
}
inline void NavSatStatus::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 service = 2;
inline bool NavSatStatus::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavSatStatus::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavSatStatus::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NavSatStatus::clear_service() {
  service_ = 0u;
  clear_has_service();
}
inline ::google::protobuf::uint32 NavSatStatus::service() const {
  return service_;
}
inline void NavSatStatus::set_service(::google::protobuf::uint32 value) {
  set_has_service();
  service_ = value;
}

// -------------------------------------------------------------------

// timestamp

// required uint32 sec = 1;
inline bool timestamp::has_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void timestamp::set_has_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void timestamp::clear_has_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void timestamp::clear_sec() {
  sec_ = 0u;
  clear_has_sec();
}
inline ::google::protobuf::uint32 timestamp::sec() const {
  return sec_;
}
inline void timestamp::set_sec(::google::protobuf::uint32 value) {
  set_has_sec();
  sec_ = value;
}

// required uint32 nsec = 2;
inline bool timestamp::has_nsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void timestamp::set_has_nsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void timestamp::clear_has_nsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void timestamp::clear_nsec() {
  nsec_ = 0u;
  clear_has_nsec();
}
inline ::google::protobuf::uint32 timestamp::nsec() const {
  return nsec_;
}
inline void timestamp::set_nsec(::google::protobuf::uint32 value) {
  set_has_nsec();
  nsec_ = value;
}

// -------------------------------------------------------------------

// sdr_config_payload

// required .ros_sdr_proto.timestamp stamp = 1;
inline bool sdr_config_payload::has_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sdr_config_payload::set_has_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sdr_config_payload::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sdr_config_payload::clear_stamp() {
  if (stamp_ != NULL) stamp_->::ros_sdr_proto::timestamp::Clear();
  clear_has_stamp();
}
inline const ::ros_sdr_proto::timestamp& sdr_config_payload::stamp() const {
  return stamp_ != NULL ? *stamp_ : *default_instance_->stamp_;
}
inline ::ros_sdr_proto::timestamp* sdr_config_payload::mutable_stamp() {
  set_has_stamp();
  if (stamp_ == NULL) stamp_ = new ::ros_sdr_proto::timestamp;
  return stamp_;
}
inline ::ros_sdr_proto::timestamp* sdr_config_payload::release_stamp() {
  clear_has_stamp();
  ::ros_sdr_proto::timestamp* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void sdr_config_payload::set_allocated_stamp(::ros_sdr_proto::timestamp* stamp) {
  delete stamp_;
  stamp_ = stamp;
  if (stamp) {
    set_has_stamp();
  } else {
    clear_has_stamp();
  }
}

// optional .ros_sdr_proto.hackrf_config hackrf = 2;
inline bool sdr_config_payload::has_hackrf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sdr_config_payload::set_has_hackrf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sdr_config_payload::clear_has_hackrf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sdr_config_payload::clear_hackrf() {
  if (hackrf_ != NULL) hackrf_->::ros_sdr_proto::hackrf_config::Clear();
  clear_has_hackrf();
}
inline const ::ros_sdr_proto::hackrf_config& sdr_config_payload::hackrf() const {
  return hackrf_ != NULL ? *hackrf_ : *default_instance_->hackrf_;
}
inline ::ros_sdr_proto::hackrf_config* sdr_config_payload::mutable_hackrf() {
  set_has_hackrf();
  if (hackrf_ == NULL) hackrf_ = new ::ros_sdr_proto::hackrf_config;
  return hackrf_;
}
inline ::ros_sdr_proto::hackrf_config* sdr_config_payload::release_hackrf() {
  clear_has_hackrf();
  ::ros_sdr_proto::hackrf_config* temp = hackrf_;
  hackrf_ = NULL;
  return temp;
}
inline void sdr_config_payload::set_allocated_hackrf(::ros_sdr_proto::hackrf_config* hackrf) {
  delete hackrf_;
  hackrf_ = hackrf;
  if (hackrf) {
    set_has_hackrf();
  } else {
    clear_has_hackrf();
  }
}

// optional .ros_sdr_proto.rtlsdr_config rtlsdr = 3;
inline bool sdr_config_payload::has_rtlsdr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sdr_config_payload::set_has_rtlsdr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sdr_config_payload::clear_has_rtlsdr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sdr_config_payload::clear_rtlsdr() {
  if (rtlsdr_ != NULL) rtlsdr_->::ros_sdr_proto::rtlsdr_config::Clear();
  clear_has_rtlsdr();
}
inline const ::ros_sdr_proto::rtlsdr_config& sdr_config_payload::rtlsdr() const {
  return rtlsdr_ != NULL ? *rtlsdr_ : *default_instance_->rtlsdr_;
}
inline ::ros_sdr_proto::rtlsdr_config* sdr_config_payload::mutable_rtlsdr() {
  set_has_rtlsdr();
  if (rtlsdr_ == NULL) rtlsdr_ = new ::ros_sdr_proto::rtlsdr_config;
  return rtlsdr_;
}
inline ::ros_sdr_proto::rtlsdr_config* sdr_config_payload::release_rtlsdr() {
  clear_has_rtlsdr();
  ::ros_sdr_proto::rtlsdr_config* temp = rtlsdr_;
  rtlsdr_ = NULL;
  return temp;
}
inline void sdr_config_payload::set_allocated_rtlsdr(::ros_sdr_proto::rtlsdr_config* rtlsdr) {
  delete rtlsdr_;
  rtlsdr_ = rtlsdr;
  if (rtlsdr) {
    set_has_rtlsdr();
  } else {
    clear_has_rtlsdr();
  }
}

// optional .ros_sdr_proto.Pose pose = 6;
inline bool sdr_config_payload::has_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sdr_config_payload::set_has_pose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sdr_config_payload::clear_has_pose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sdr_config_payload::clear_pose() {
  if (pose_ != NULL) pose_->::ros_sdr_proto::Pose::Clear();
  clear_has_pose();
}
inline const ::ros_sdr_proto::Pose& sdr_config_payload::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::ros_sdr_proto::Pose* sdr_config_payload::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::ros_sdr_proto::Pose;
  return pose_;
}
inline ::ros_sdr_proto::Pose* sdr_config_payload::release_pose() {
  clear_has_pose();
  ::ros_sdr_proto::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void sdr_config_payload::set_allocated_pose(::ros_sdr_proto::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
}

// optional .ros_sdr_proto.NavSatStatus status = 7;
inline bool sdr_config_payload::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void sdr_config_payload::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void sdr_config_payload::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void sdr_config_payload::clear_status() {
  if (status_ != NULL) status_->::ros_sdr_proto::NavSatStatus::Clear();
  clear_has_status();
}
inline const ::ros_sdr_proto::NavSatStatus& sdr_config_payload::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::ros_sdr_proto::NavSatStatus* sdr_config_payload::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::ros_sdr_proto::NavSatStatus;
  return status_;
}
inline ::ros_sdr_proto::NavSatStatus* sdr_config_payload::release_status() {
  clear_has_status();
  ::ros_sdr_proto::NavSatStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void sdr_config_payload::set_allocated_status(::ros_sdr_proto::NavSatStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
}

// required bool iq_compressed = 8 [default = true];
inline bool sdr_config_payload::has_iq_compressed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void sdr_config_payload::set_has_iq_compressed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void sdr_config_payload::clear_has_iq_compressed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void sdr_config_payload::clear_iq_compressed() {
  iq_compressed_ = true;
  clear_has_iq_compressed();
}
inline bool sdr_config_payload::iq_compressed() const {
  return iq_compressed_;
}
inline void sdr_config_payload::set_iq_compressed(bool value) {
  set_has_iq_compressed();
  iq_compressed_ = value;
}

// optional double temperature = 9;
inline bool sdr_config_payload::has_temperature() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sdr_config_payload::set_has_temperature() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sdr_config_payload::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sdr_config_payload::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline double sdr_config_payload::temperature() const {
  return temperature_;
}
inline void sdr_config_payload::set_temperature(double value) {
  set_has_temperature();
  temperature_ = value;
}

// -------------------------------------------------------------------

// iq_payload

// repeated uint32 i = 4 [packed = true];
inline int iq_payload::i_size() const {
  return i_.size();
}
inline void iq_payload::clear_i() {
  i_.Clear();
}
inline ::google::protobuf::uint32 iq_payload::i(int index) const {
  return i_.Get(index);
}
inline void iq_payload::set_i(int index, ::google::protobuf::uint32 value) {
  i_.Set(index, value);
}
inline void iq_payload::add_i(::google::protobuf::uint32 value) {
  i_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
iq_payload::i() const {
  return i_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
iq_payload::mutable_i() {
  return &i_;
}

// repeated uint32 q = 5 [packed = true];
inline int iq_payload::q_size() const {
  return q_.size();
}
inline void iq_payload::clear_q() {
  q_.Clear();
}
inline ::google::protobuf::uint32 iq_payload::q(int index) const {
  return q_.Get(index);
}
inline void iq_payload::set_q(int index, ::google::protobuf::uint32 value) {
  q_.Set(index, value);
}
inline void iq_payload::add_q(::google::protobuf::uint32 value) {
  q_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
iq_payload::q() const {
  return q_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
iq_payload::mutable_q() {
  return &q_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ros_sdr_proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sdr_5fdata_2eproto__INCLUDED
