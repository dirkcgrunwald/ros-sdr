// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdr_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sdr_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ros_sdr_proto {

namespace {

const ::google::protobuf::Descriptor* hackrf_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hackrf_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* rtlsdr_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rtlsdr_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quaternion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quaternion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose_reflection_ = NULL;
const ::google::protobuf::Descriptor* NavSatStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NavSatStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* timestamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  timestamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* sdr_config_payload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sdr_config_payload_reflection_ = NULL;
const ::google::protobuf::Descriptor* iq_payload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  iq_payload_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sdr_5fdata_2eproto() {
  protobuf_AddDesc_sdr_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sdr_data.proto");
  GOOGLE_CHECK(file != NULL);
  hackrf_config_descriptor_ = file->message_type(0);
  static const int hackrf_config_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hackrf_config, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hackrf_config, sample_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hackrf_config, baseband_filter_bw_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hackrf_config, lnagain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hackrf_config, vgagain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hackrf_config, ampenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hackrf_config, antennaenable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hackrf_config, txvgagain_),
  };
  hackrf_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hackrf_config_descriptor_,
      hackrf_config::default_instance_,
      hackrf_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hackrf_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hackrf_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hackrf_config));
  rtlsdr_config_descriptor_ = file->message_type(1);
  static const int rtlsdr_config_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtlsdr_config, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtlsdr_config, sample_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtlsdr_config, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtlsdr_config, ppm_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtlsdr_config, gainmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtlsdr_config, dithering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtlsdr_config, direct_sampleing_),
  };
  rtlsdr_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rtlsdr_config_descriptor_,
      rtlsdr_config::default_instance_,
      rtlsdr_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtlsdr_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rtlsdr_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rtlsdr_config));
  Point_descriptor_ = file->message_type(2);
  static const int Point_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  Quaternion_descriptor_ = file->message_type(3);
  static const int Quaternion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, w_),
  };
  Quaternion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quaternion_descriptor_,
      Quaternion::default_instance_,
      Quaternion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quaternion));
  Pose_descriptor_ = file->message_type(4);
  static const int Pose_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, position_covariance_),
  };
  Pose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pose_descriptor_,
      Pose::default_instance_,
      Pose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pose));
  NavSatStatus_descriptor_ = file->message_type(5);
  static const int NavSatStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatStatus, service_),
  };
  NavSatStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NavSatStatus_descriptor_,
      NavSatStatus::default_instance_,
      NavSatStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NavSatStatus));
  timestamp_descriptor_ = file->message_type(6);
  static const int timestamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(timestamp, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(timestamp, nsec_),
  };
  timestamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      timestamp_descriptor_,
      timestamp::default_instance_,
      timestamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(timestamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(timestamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(timestamp));
  sdr_config_payload_descriptor_ = file->message_type(7);
  static const int sdr_config_payload_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdr_config_payload, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdr_config_payload, hackrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdr_config_payload, rtlsdr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdr_config_payload, pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdr_config_payload, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdr_config_payload, iq_compressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdr_config_payload, temperature_),
  };
  sdr_config_payload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sdr_config_payload_descriptor_,
      sdr_config_payload::default_instance_,
      sdr_config_payload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdr_config_payload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sdr_config_payload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sdr_config_payload));
  iq_payload_descriptor_ = file->message_type(8);
  static const int iq_payload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iq_payload, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iq_payload, q_),
  };
  iq_payload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      iq_payload_descriptor_,
      iq_payload::default_instance_,
      iq_payload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iq_payload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(iq_payload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(iq_payload));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sdr_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hackrf_config_descriptor_, &hackrf_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rtlsdr_config_descriptor_, &rtlsdr_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quaternion_descriptor_, &Quaternion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pose_descriptor_, &Pose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NavSatStatus_descriptor_, &NavSatStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    timestamp_descriptor_, &timestamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sdr_config_payload_descriptor_, &sdr_config_payload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    iq_payload_descriptor_, &iq_payload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sdr_5fdata_2eproto() {
  delete hackrf_config::default_instance_;
  delete hackrf_config_reflection_;
  delete rtlsdr_config::default_instance_;
  delete rtlsdr_config_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Quaternion::default_instance_;
  delete Quaternion_reflection_;
  delete Pose::default_instance_;
  delete Pose_reflection_;
  delete NavSatStatus::default_instance_;
  delete NavSatStatus_reflection_;
  delete timestamp::default_instance_;
  delete timestamp_reflection_;
  delete sdr_config_payload::default_instance_;
  delete sdr_config_payload_reflection_;
  delete iq_payload::default_instance_;
  delete iq_payload_reflection_;
}

void protobuf_AddDesc_sdr_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016sdr_data.proto\022\rros_sdr_proto\"\265\001\n\rhack"
    "rf_config\022\021\n\tfrequency\030\001 \002(\003\022\023\n\013sample_r"
    "ate\030\002 \002(\001\022\035\n\025baseband_filter_bw_hz\030\003 \001(\005"
    "\022\017\n\007lnaGain\030\004 \001(\005\022\017\n\007vgaGain\030\005 \001(\005\022\021\n\tam"
    "pEnable\030\006 \001(\010\022\025\n\rantennaEnable\030\007 \001(\010\022\021\n\t"
    "txvgaGain\030\010 \001(\005\"\227\001\n\rrtlsdr_config\022\021\n\tfre"
    "quency\030\001 \002(\003\022\023\n\013sample_rate\030\002 \002(\r\022\014\n\004gai"
    "n\030\003 \001(\005\022\021\n\tppm_error\030\004 \001(\005\022\020\n\010gainmode\030\005"
    " \001(\010\022\021\n\tdithering\030\006 \001(\010\022\030\n\020direct_sample"
    "ing\030\007 \001(\010\"(\n\005Point\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001"
    "\022\t\n\001z\030\003 \002(\001\"8\n\nQuaternion\022\t\n\001x\030\001 \002(\001\022\t\n\001"
    "y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\022\t\n\001w\030\004 \002(\001\"\262\001\n\004Pose\022&"
    "\n\010position\030\001 \002(\0132\024.ros_sdr_proto.Point\022."
    "\n\013orientation\030\002 \002(\0132\031.ros_sdr_proto.Quat"
    "ernion\022\020\n\010latitude\030\003 \002(\001\022\021\n\tlongitude\030\004 "
    "\002(\001\022\020\n\010altitude\030\005 \002(\001\022\033\n\023position_covari"
    "ance\030\006 \003(\001\"/\n\014NavSatStatus\022\016\n\006status\030\001 \002"
    "(\005\022\017\n\007service\030\002 \002(\r\"&\n\ttimestamp\022\013\n\003sec\030"
    "\001 \002(\r\022\014\n\004nsec\030\002 \002(\r\"\233\002\n\022sdr_config_paylo"
    "ad\022\'\n\005stamp\030\001 \002(\0132\030.ros_sdr_proto.timest"
    "amp\022,\n\006hackrf\030\002 \001(\0132\034.ros_sdr_proto.hack"
    "rf_config\022,\n\006rtlsdr\030\003 \001(\0132\034.ros_sdr_prot"
    "o.rtlsdr_config\022!\n\004pose\030\006 \001(\0132\023.ros_sdr_"
    "proto.Pose\022+\n\006status\030\007 \001(\0132\033.ros_sdr_pro"
    "to.NavSatStatus\022\033\n\riq_compressed\030\010 \002(\010:\004"
    "true\022\023\n\013temperature\030\t \001(\001\"*\n\niq_payload\022"
    "\r\n\001i\030\004 \003(\rB\002\020\001\022\r\n\001q\030\005 \003(\rB\002\020\001", 1069);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sdr_data.proto", &protobuf_RegisterTypes);
  hackrf_config::default_instance_ = new hackrf_config();
  rtlsdr_config::default_instance_ = new rtlsdr_config();
  Point::default_instance_ = new Point();
  Quaternion::default_instance_ = new Quaternion();
  Pose::default_instance_ = new Pose();
  NavSatStatus::default_instance_ = new NavSatStatus();
  timestamp::default_instance_ = new timestamp();
  sdr_config_payload::default_instance_ = new sdr_config_payload();
  iq_payload::default_instance_ = new iq_payload();
  hackrf_config::default_instance_->InitAsDefaultInstance();
  rtlsdr_config::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Quaternion::default_instance_->InitAsDefaultInstance();
  Pose::default_instance_->InitAsDefaultInstance();
  NavSatStatus::default_instance_->InitAsDefaultInstance();
  timestamp::default_instance_->InitAsDefaultInstance();
  sdr_config_payload::default_instance_->InitAsDefaultInstance();
  iq_payload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sdr_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sdr_5fdata_2eproto {
  StaticDescriptorInitializer_sdr_5fdata_2eproto() {
    protobuf_AddDesc_sdr_5fdata_2eproto();
  }
} static_descriptor_initializer_sdr_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int hackrf_config::kFrequencyFieldNumber;
const int hackrf_config::kSampleRateFieldNumber;
const int hackrf_config::kBasebandFilterBwHzFieldNumber;
const int hackrf_config::kLnaGainFieldNumber;
const int hackrf_config::kVgaGainFieldNumber;
const int hackrf_config::kAmpEnableFieldNumber;
const int hackrf_config::kAntennaEnableFieldNumber;
const int hackrf_config::kTxvgaGainFieldNumber;
#endif  // !_MSC_VER

hackrf_config::hackrf_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hackrf_config::InitAsDefaultInstance() {
}

hackrf_config::hackrf_config(const hackrf_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hackrf_config::SharedCtor() {
  _cached_size_ = 0;
  frequency_ = GOOGLE_LONGLONG(0);
  sample_rate_ = 0;
  baseband_filter_bw_hz_ = 0;
  lnagain_ = 0;
  vgagain_ = 0;
  ampenable_ = false;
  antennaenable_ = false;
  txvgagain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hackrf_config::~hackrf_config() {
  SharedDtor();
}

void hackrf_config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hackrf_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hackrf_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hackrf_config_descriptor_;
}

const hackrf_config& hackrf_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sdr_5fdata_2eproto();
  return *default_instance_;
}

hackrf_config* hackrf_config::default_instance_ = NULL;

hackrf_config* hackrf_config::New() const {
  return new hackrf_config;
}

void hackrf_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frequency_ = GOOGLE_LONGLONG(0);
    sample_rate_ = 0;
    baseband_filter_bw_hz_ = 0;
    lnagain_ = 0;
    vgagain_ = 0;
    ampenable_ = false;
    antennaenable_ = false;
    txvgagain_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hackrf_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 frequency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sample_rate;
        break;
      }

      // required double sample_rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sample_rate_)));
          set_has_sample_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_baseband_filter_bw_hz;
        break;
      }

      // optional int32 baseband_filter_bw_hz = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baseband_filter_bw_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseband_filter_bw_hz_)));
          set_has_baseband_filter_bw_hz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lnaGain;
        break;
      }

      // optional int32 lnaGain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lnaGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lnagain_)));
          set_has_lnagain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vgaGain;
        break;
      }

      // optional int32 vgaGain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vgaGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vgagain_)));
          set_has_vgagain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ampEnable;
        break;
      }

      // optional bool ampEnable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ampEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ampenable_)));
          set_has_ampenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_antennaEnable;
        break;
      }

      // optional bool antennaEnable = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antennaEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &antennaenable_)));
          set_has_antennaenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_txvgaGain;
        break;
      }

      // optional int32 txvgaGain = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txvgaGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &txvgagain_)));
          set_has_txvgagain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hackrf_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 frequency = 1;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->frequency(), output);
  }

  // required double sample_rate = 2;
  if (has_sample_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sample_rate(), output);
  }

  // optional int32 baseband_filter_bw_hz = 3;
  if (has_baseband_filter_bw_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->baseband_filter_bw_hz(), output);
  }

  // optional int32 lnaGain = 4;
  if (has_lnagain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lnagain(), output);
  }

  // optional int32 vgaGain = 5;
  if (has_vgagain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vgagain(), output);
  }

  // optional bool ampEnable = 6;
  if (has_ampenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ampenable(), output);
  }

  // optional bool antennaEnable = 7;
  if (has_antennaenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->antennaenable(), output);
  }

  // optional int32 txvgaGain = 8;
  if (has_txvgagain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->txvgagain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hackrf_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 frequency = 1;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->frequency(), target);
  }

  // required double sample_rate = 2;
  if (has_sample_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sample_rate(), target);
  }

  // optional int32 baseband_filter_bw_hz = 3;
  if (has_baseband_filter_bw_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->baseband_filter_bw_hz(), target);
  }

  // optional int32 lnaGain = 4;
  if (has_lnagain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lnagain(), target);
  }

  // optional int32 vgaGain = 5;
  if (has_vgagain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vgagain(), target);
  }

  // optional bool ampEnable = 6;
  if (has_ampenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ampenable(), target);
  }

  // optional bool antennaEnable = 7;
  if (has_antennaenable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->antennaenable(), target);
  }

  // optional int32 txvgaGain = 8;
  if (has_txvgagain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->txvgagain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hackrf_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 frequency = 1;
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->frequency());
    }

    // required double sample_rate = 2;
    if (has_sample_rate()) {
      total_size += 1 + 8;
    }

    // optional int32 baseband_filter_bw_hz = 3;
    if (has_baseband_filter_bw_hz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseband_filter_bw_hz());
    }

    // optional int32 lnaGain = 4;
    if (has_lnagain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lnagain());
    }

    // optional int32 vgaGain = 5;
    if (has_vgagain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vgagain());
    }

    // optional bool ampEnable = 6;
    if (has_ampenable()) {
      total_size += 1 + 1;
    }

    // optional bool antennaEnable = 7;
    if (has_antennaenable()) {
      total_size += 1 + 1;
    }

    // optional int32 txvgaGain = 8;
    if (has_txvgagain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->txvgagain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hackrf_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hackrf_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hackrf_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hackrf_config::MergeFrom(const hackrf_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_sample_rate()) {
      set_sample_rate(from.sample_rate());
    }
    if (from.has_baseband_filter_bw_hz()) {
      set_baseband_filter_bw_hz(from.baseband_filter_bw_hz());
    }
    if (from.has_lnagain()) {
      set_lnagain(from.lnagain());
    }
    if (from.has_vgagain()) {
      set_vgagain(from.vgagain());
    }
    if (from.has_ampenable()) {
      set_ampenable(from.ampenable());
    }
    if (from.has_antennaenable()) {
      set_antennaenable(from.antennaenable());
    }
    if (from.has_txvgagain()) {
      set_txvgagain(from.txvgagain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hackrf_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hackrf_config::CopyFrom(const hackrf_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hackrf_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void hackrf_config::Swap(hackrf_config* other) {
  if (other != this) {
    std::swap(frequency_, other->frequency_);
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(baseband_filter_bw_hz_, other->baseband_filter_bw_hz_);
    std::swap(lnagain_, other->lnagain_);
    std::swap(vgagain_, other->vgagain_);
    std::swap(ampenable_, other->ampenable_);
    std::swap(antennaenable_, other->antennaenable_);
    std::swap(txvgagain_, other->txvgagain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hackrf_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hackrf_config_descriptor_;
  metadata.reflection = hackrf_config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rtlsdr_config::kFrequencyFieldNumber;
const int rtlsdr_config::kSampleRateFieldNumber;
const int rtlsdr_config::kGainFieldNumber;
const int rtlsdr_config::kPpmErrorFieldNumber;
const int rtlsdr_config::kGainmodeFieldNumber;
const int rtlsdr_config::kDitheringFieldNumber;
const int rtlsdr_config::kDirectSampleingFieldNumber;
#endif  // !_MSC_VER

rtlsdr_config::rtlsdr_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rtlsdr_config::InitAsDefaultInstance() {
}

rtlsdr_config::rtlsdr_config(const rtlsdr_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rtlsdr_config::SharedCtor() {
  _cached_size_ = 0;
  frequency_ = GOOGLE_LONGLONG(0);
  sample_rate_ = 0u;
  gain_ = 0;
  ppm_error_ = 0;
  gainmode_ = false;
  dithering_ = false;
  direct_sampleing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rtlsdr_config::~rtlsdr_config() {
  SharedDtor();
}

void rtlsdr_config::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rtlsdr_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rtlsdr_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rtlsdr_config_descriptor_;
}

const rtlsdr_config& rtlsdr_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sdr_5fdata_2eproto();
  return *default_instance_;
}

rtlsdr_config* rtlsdr_config::default_instance_ = NULL;

rtlsdr_config* rtlsdr_config::New() const {
  return new rtlsdr_config;
}

void rtlsdr_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frequency_ = GOOGLE_LONGLONG(0);
    sample_rate_ = 0u;
    gain_ = 0;
    ppm_error_ = 0;
    gainmode_ = false;
    dithering_ = false;
    direct_sampleing_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rtlsdr_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 frequency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sample_rate;
        break;
      }

      // required uint32 sample_rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sample_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_rate_)));
          set_has_sample_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gain;
        break;
      }

      // optional int32 gain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ppm_error;
        break;
      }

      // optional int32 ppm_error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ppm_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ppm_error_)));
          set_has_ppm_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gainmode;
        break;
      }

      // optional bool gainmode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gainmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gainmode_)));
          set_has_gainmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dithering;
        break;
      }

      // optional bool dithering = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dithering:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dithering_)));
          set_has_dithering();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_direct_sampleing;
        break;
      }

      // optional bool direct_sampleing = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct_sampleing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &direct_sampleing_)));
          set_has_direct_sampleing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rtlsdr_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 frequency = 1;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->frequency(), output);
  }

  // required uint32 sample_rate = 2;
  if (has_sample_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sample_rate(), output);
  }

  // optional int32 gain = 3;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gain(), output);
  }

  // optional int32 ppm_error = 4;
  if (has_ppm_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ppm_error(), output);
  }

  // optional bool gainmode = 5;
  if (has_gainmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->gainmode(), output);
  }

  // optional bool dithering = 6;
  if (has_dithering()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->dithering(), output);
  }

  // optional bool direct_sampleing = 7;
  if (has_direct_sampleing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->direct_sampleing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rtlsdr_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 frequency = 1;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->frequency(), target);
  }

  // required uint32 sample_rate = 2;
  if (has_sample_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sample_rate(), target);
  }

  // optional int32 gain = 3;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gain(), target);
  }

  // optional int32 ppm_error = 4;
  if (has_ppm_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ppm_error(), target);
  }

  // optional bool gainmode = 5;
  if (has_gainmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->gainmode(), target);
  }

  // optional bool dithering = 6;
  if (has_dithering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->dithering(), target);
  }

  // optional bool direct_sampleing = 7;
  if (has_direct_sampleing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->direct_sampleing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rtlsdr_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 frequency = 1;
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->frequency());
    }

    // required uint32 sample_rate = 2;
    if (has_sample_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_rate());
    }

    // optional int32 gain = 3;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain());
    }

    // optional int32 ppm_error = 4;
    if (has_ppm_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ppm_error());
    }

    // optional bool gainmode = 5;
    if (has_gainmode()) {
      total_size += 1 + 1;
    }

    // optional bool dithering = 6;
    if (has_dithering()) {
      total_size += 1 + 1;
    }

    // optional bool direct_sampleing = 7;
    if (has_direct_sampleing()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rtlsdr_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rtlsdr_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rtlsdr_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rtlsdr_config::MergeFrom(const rtlsdr_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_sample_rate()) {
      set_sample_rate(from.sample_rate());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_ppm_error()) {
      set_ppm_error(from.ppm_error());
    }
    if (from.has_gainmode()) {
      set_gainmode(from.gainmode());
    }
    if (from.has_dithering()) {
      set_dithering(from.dithering());
    }
    if (from.has_direct_sampleing()) {
      set_direct_sampleing(from.direct_sampleing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rtlsdr_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rtlsdr_config::CopyFrom(const rtlsdr_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rtlsdr_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void rtlsdr_config::Swap(rtlsdr_config* other) {
  if (other != this) {
    std::swap(frequency_, other->frequency_);
    std::swap(sample_rate_, other->sample_rate_);
    std::swap(gain_, other->gain_);
    std::swap(ppm_error_, other->ppm_error_);
    std::swap(gainmode_, other->gainmode_);
    std::swap(dithering_, other->dithering_);
    std::swap(direct_sampleing_, other->direct_sampleing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rtlsdr_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rtlsdr_config_descriptor_;
  metadata.reflection = rtlsdr_config_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sdr_5fdata_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quaternion::kXFieldNumber;
const int Quaternion::kYFieldNumber;
const int Quaternion::kZFieldNumber;
const int Quaternion::kWFieldNumber;
#endif  // !_MSC_VER

Quaternion::Quaternion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quaternion::InitAsDefaultInstance() {
}

Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quaternion::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quaternion::~Quaternion() {
  SharedDtor();
}

void Quaternion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quaternion_descriptor_;
}

const Quaternion& Quaternion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sdr_5fdata_2eproto();
  return *default_instance_;
}

Quaternion* Quaternion::default_instance_ = NULL;

Quaternion* Quaternion::New() const {
  return new Quaternion;
}

void Quaternion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    w_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_w;
        break;
      }

      // required double w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // required double w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quaternion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // required double w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quaternion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // required double w = 4;
    if (has_w()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quaternion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quaternion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quaternion_descriptor_;
  metadata.reflection = Quaternion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pose::kPositionFieldNumber;
const int Pose::kOrientationFieldNumber;
const int Pose::kLatitudeFieldNumber;
const int Pose::kLongitudeFieldNumber;
const int Pose::kAltitudeFieldNumber;
const int Pose::kPositionCovarianceFieldNumber;
#endif  // !_MSC_VER

Pose::Pose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pose::InitAsDefaultInstance() {
  position_ = const_cast< ::ros_sdr_proto::Point*>(&::ros_sdr_proto::Point::default_instance());
  orientation_ = const_cast< ::ros_sdr_proto::Quaternion*>(&::ros_sdr_proto::Quaternion::default_instance());
}

Pose::Pose(const Pose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pose::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  orientation_ = NULL;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pose::~Pose() {
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete orientation_;
  }
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose_descriptor_;
}

const Pose& Pose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sdr_5fdata_2eproto();
  return *default_instance_;
}

Pose* Pose::default_instance_ = NULL;

Pose* Pose::New() const {
  return new Pose;
}

void Pose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::ros_sdr_proto::Point::Clear();
    }
    if (has_orientation()) {
      if (orientation_ != NULL) orientation_->::ros_sdr_proto::Quaternion::Clear();
    }
    latitude_ = 0;
    longitude_ = 0;
    altitude_ = 0;
  }
  position_covariance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ros_sdr_proto.Point position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orientation;
        break;
      }

      // required .ros_sdr_proto.Quaternion orientation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_altitude;
        break;
      }

      // required double altitude = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_position_covariance;
        break;
      }

      // repeated double position_covariance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_position_covariance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_position_covariance())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position_covariance())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_position_covariance;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ros_sdr_proto.Point position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // required .ros_sdr_proto.Quaternion orientation = 2;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->orientation(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required double altitude = 5;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->altitude(), output);
  }

  // repeated double position_covariance = 6;
  for (int i = 0; i < this->position_covariance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->position_covariance(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ros_sdr_proto.Point position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // required .ros_sdr_proto.Quaternion orientation = 2;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orientation(), target);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required double altitude = 5;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->altitude(), target);
  }

  // repeated double position_covariance = 6;
  for (int i = 0; i < this->position_covariance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->position_covariance(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ros_sdr_proto.Point position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .ros_sdr_proto.Quaternion orientation = 2;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orientation());
    }

    // required double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 4;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required double altitude = 5;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

  }
  // repeated double position_covariance = 6;
  {
    int data_size = 0;
    data_size = 8 * this->position_covariance_size();
    total_size += 1 * this->position_covariance_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_covariance_.MergeFrom(from.position_covariance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::ros_sdr_proto::Point::MergeFrom(from.position());
    }
    if (from.has_orientation()) {
      mutable_orientation()->::ros_sdr_proto::Quaternion::MergeFrom(from.orientation());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_orientation()) {
    if (!this->orientation().IsInitialized()) return false;
  }
  return true;
}

void Pose::Swap(Pose* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(orientation_, other->orientation_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    position_covariance_.Swap(&other->position_covariance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose_descriptor_;
  metadata.reflection = Pose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NavSatStatus::kStatusFieldNumber;
const int NavSatStatus::kServiceFieldNumber;
#endif  // !_MSC_VER

NavSatStatus::NavSatStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NavSatStatus::InitAsDefaultInstance() {
}

NavSatStatus::NavSatStatus(const NavSatStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NavSatStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  service_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NavSatStatus::~NavSatStatus() {
  SharedDtor();
}

void NavSatStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NavSatStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavSatStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavSatStatus_descriptor_;
}

const NavSatStatus& NavSatStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sdr_5fdata_2eproto();
  return *default_instance_;
}

NavSatStatus* NavSatStatus::default_instance_ = NULL;

NavSatStatus* NavSatStatus::New() const {
  return new NavSatStatus;
}

void NavSatStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    service_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NavSatStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_service;
        break;
      }

      // required uint32 service = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_)));
          set_has_service();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NavSatStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required uint32 service = 2;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->service(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NavSatStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // required uint32 service = 2;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->service(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NavSatStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required uint32 service = 2;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavSatStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NavSatStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NavSatStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NavSatStatus::MergeFrom(const NavSatStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NavSatStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavSatStatus::CopyFrom(const NavSatStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavSatStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NavSatStatus::Swap(NavSatStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(service_, other->service_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NavSatStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NavSatStatus_descriptor_;
  metadata.reflection = NavSatStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int timestamp::kSecFieldNumber;
const int timestamp::kNsecFieldNumber;
#endif  // !_MSC_VER

timestamp::timestamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void timestamp::InitAsDefaultInstance() {
}

timestamp::timestamp(const timestamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void timestamp::SharedCtor() {
  _cached_size_ = 0;
  sec_ = 0u;
  nsec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

timestamp::~timestamp() {
  SharedDtor();
}

void timestamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* timestamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return timestamp_descriptor_;
}

const timestamp& timestamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sdr_5fdata_2eproto();
  return *default_instance_;
}

timestamp* timestamp::default_instance_ = NULL;

timestamp* timestamp::New() const {
  return new timestamp;
}

void timestamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sec_ = 0u;
    nsec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nsec;
        break;
      }

      // required uint32 nsec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nsec_)));
          set_has_nsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sec = 1;
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sec(), output);
  }

  // required uint32 nsec = 2;
  if (has_nsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* timestamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sec = 1;
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sec(), target);
  }

  // required uint32 nsec = 2;
  if (has_nsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int timestamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sec = 1;
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sec());
    }

    // required uint32 nsec = 2;
    if (has_nsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nsec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void timestamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const timestamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const timestamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void timestamp::MergeFrom(const timestamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_nsec()) {
      set_nsec(from.nsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void timestamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void timestamp::CopyFrom(const timestamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool timestamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void timestamp::Swap(timestamp* other) {
  if (other != this) {
    std::swap(sec_, other->sec_);
    std::swap(nsec_, other->nsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata timestamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = timestamp_descriptor_;
  metadata.reflection = timestamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sdr_config_payload::kStampFieldNumber;
const int sdr_config_payload::kHackrfFieldNumber;
const int sdr_config_payload::kRtlsdrFieldNumber;
const int sdr_config_payload::kPoseFieldNumber;
const int sdr_config_payload::kStatusFieldNumber;
const int sdr_config_payload::kIqCompressedFieldNumber;
const int sdr_config_payload::kTemperatureFieldNumber;
#endif  // !_MSC_VER

sdr_config_payload::sdr_config_payload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sdr_config_payload::InitAsDefaultInstance() {
  stamp_ = const_cast< ::ros_sdr_proto::timestamp*>(&::ros_sdr_proto::timestamp::default_instance());
  hackrf_ = const_cast< ::ros_sdr_proto::hackrf_config*>(&::ros_sdr_proto::hackrf_config::default_instance());
  rtlsdr_ = const_cast< ::ros_sdr_proto::rtlsdr_config*>(&::ros_sdr_proto::rtlsdr_config::default_instance());
  pose_ = const_cast< ::ros_sdr_proto::Pose*>(&::ros_sdr_proto::Pose::default_instance());
  status_ = const_cast< ::ros_sdr_proto::NavSatStatus*>(&::ros_sdr_proto::NavSatStatus::default_instance());
}

sdr_config_payload::sdr_config_payload(const sdr_config_payload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sdr_config_payload::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = NULL;
  hackrf_ = NULL;
  rtlsdr_ = NULL;
  pose_ = NULL;
  status_ = NULL;
  iq_compressed_ = true;
  temperature_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sdr_config_payload::~sdr_config_payload() {
  SharedDtor();
}

void sdr_config_payload::SharedDtor() {
  if (this != default_instance_) {
    delete stamp_;
    delete hackrf_;
    delete rtlsdr_;
    delete pose_;
    delete status_;
  }
}

void sdr_config_payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sdr_config_payload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sdr_config_payload_descriptor_;
}

const sdr_config_payload& sdr_config_payload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sdr_5fdata_2eproto();
  return *default_instance_;
}

sdr_config_payload* sdr_config_payload::default_instance_ = NULL;

sdr_config_payload* sdr_config_payload::New() const {
  return new sdr_config_payload;
}

void sdr_config_payload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stamp()) {
      if (stamp_ != NULL) stamp_->::ros_sdr_proto::timestamp::Clear();
    }
    if (has_hackrf()) {
      if (hackrf_ != NULL) hackrf_->::ros_sdr_proto::hackrf_config::Clear();
    }
    if (has_rtlsdr()) {
      if (rtlsdr_ != NULL) rtlsdr_->::ros_sdr_proto::rtlsdr_config::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::ros_sdr_proto::Pose::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::ros_sdr_proto::NavSatStatus::Clear();
    }
    iq_compressed_ = true;
    temperature_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sdr_config_payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ros_sdr_proto.timestamp stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hackrf;
        break;
      }

      // optional .ros_sdr_proto.hackrf_config hackrf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hackrf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hackrf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rtlsdr;
        break;
      }

      // optional .ros_sdr_proto.rtlsdr_config rtlsdr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rtlsdr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtlsdr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pose;
        break;
      }

      // optional .ros_sdr_proto.Pose pose = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_status;
        break;
      }

      // optional .ros_sdr_proto.NavSatStatus status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_iq_compressed;
        break;
      }

      // required bool iq_compressed = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iq_compressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iq_compressed_)));
          set_has_iq_compressed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_temperature;
        break;
      }

      // optional double temperature = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sdr_config_payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ros_sdr_proto.timestamp stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stamp(), output);
  }

  // optional .ros_sdr_proto.hackrf_config hackrf = 2;
  if (has_hackrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hackrf(), output);
  }

  // optional .ros_sdr_proto.rtlsdr_config rtlsdr = 3;
  if (has_rtlsdr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rtlsdr(), output);
  }

  // optional .ros_sdr_proto.Pose pose = 6;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pose(), output);
  }

  // optional .ros_sdr_proto.NavSatStatus status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->status(), output);
  }

  // required bool iq_compressed = 8 [default = true];
  if (has_iq_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iq_compressed(), output);
  }

  // optional double temperature = 9;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->temperature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sdr_config_payload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ros_sdr_proto.timestamp stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stamp(), target);
  }

  // optional .ros_sdr_proto.hackrf_config hackrf = 2;
  if (has_hackrf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hackrf(), target);
  }

  // optional .ros_sdr_proto.rtlsdr_config rtlsdr = 3;
  if (has_rtlsdr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rtlsdr(), target);
  }

  // optional .ros_sdr_proto.Pose pose = 6;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pose(), target);
  }

  // optional .ros_sdr_proto.NavSatStatus status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->status(), target);
  }

  // required bool iq_compressed = 8 [default = true];
  if (has_iq_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iq_compressed(), target);
  }

  // optional double temperature = 9;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->temperature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sdr_config_payload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ros_sdr_proto.timestamp stamp = 1;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stamp());
    }

    // optional .ros_sdr_proto.hackrf_config hackrf = 2;
    if (has_hackrf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hackrf());
    }

    // optional .ros_sdr_proto.rtlsdr_config rtlsdr = 3;
    if (has_rtlsdr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rtlsdr());
    }

    // optional .ros_sdr_proto.Pose pose = 6;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

    // optional .ros_sdr_proto.NavSatStatus status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required bool iq_compressed = 8 [default = true];
    if (has_iq_compressed()) {
      total_size += 1 + 1;
    }

    // optional double temperature = 9;
    if (has_temperature()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sdr_config_payload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sdr_config_payload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sdr_config_payload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sdr_config_payload::MergeFrom(const sdr_config_payload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stamp()) {
      mutable_stamp()->::ros_sdr_proto::timestamp::MergeFrom(from.stamp());
    }
    if (from.has_hackrf()) {
      mutable_hackrf()->::ros_sdr_proto::hackrf_config::MergeFrom(from.hackrf());
    }
    if (from.has_rtlsdr()) {
      mutable_rtlsdr()->::ros_sdr_proto::rtlsdr_config::MergeFrom(from.rtlsdr());
    }
    if (from.has_pose()) {
      mutable_pose()->::ros_sdr_proto::Pose::MergeFrom(from.pose());
    }
    if (from.has_status()) {
      mutable_status()->::ros_sdr_proto::NavSatStatus::MergeFrom(from.status());
    }
    if (from.has_iq_compressed()) {
      set_iq_compressed(from.iq_compressed());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sdr_config_payload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sdr_config_payload::CopyFrom(const sdr_config_payload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sdr_config_payload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;

  if (has_stamp()) {
    if (!this->stamp().IsInitialized()) return false;
  }
  if (has_hackrf()) {
    if (!this->hackrf().IsInitialized()) return false;
  }
  if (has_rtlsdr()) {
    if (!this->rtlsdr().IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void sdr_config_payload::Swap(sdr_config_payload* other) {
  if (other != this) {
    std::swap(stamp_, other->stamp_);
    std::swap(hackrf_, other->hackrf_);
    std::swap(rtlsdr_, other->rtlsdr_);
    std::swap(pose_, other->pose_);
    std::swap(status_, other->status_);
    std::swap(iq_compressed_, other->iq_compressed_);
    std::swap(temperature_, other->temperature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sdr_config_payload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sdr_config_payload_descriptor_;
  metadata.reflection = sdr_config_payload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int iq_payload::kIFieldNumber;
const int iq_payload::kQFieldNumber;
#endif  // !_MSC_VER

iq_payload::iq_payload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void iq_payload::InitAsDefaultInstance() {
}

iq_payload::iq_payload(const iq_payload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void iq_payload::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

iq_payload::~iq_payload() {
  SharedDtor();
}

void iq_payload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void iq_payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* iq_payload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return iq_payload_descriptor_;
}

const iq_payload& iq_payload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sdr_5fdata_2eproto();
  return *default_instance_;
}

iq_payload* iq_payload::default_instance_ = NULL;

iq_payload* iq_payload::New() const {
  return new iq_payload;
}

void iq_payload::Clear() {
  i_.Clear();
  q_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool iq_payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 i = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_i())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_i())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_q;
        break;
      }

      // repeated uint32 q = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_q())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_q())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void iq_payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 i = 4 [packed = true];
  if (this->i_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_i_cached_byte_size_);
  }
  for (int i = 0; i < this->i_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->i(i), output);
  }

  // repeated uint32 q = 5 [packed = true];
  if (this->q_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_q_cached_byte_size_);
  }
  for (int i = 0; i < this->q_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->q(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* iq_payload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 i = 4 [packed = true];
  if (this->i_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _i_cached_byte_size_, target);
  }
  for (int i = 0; i < this->i_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->i(i), target);
  }

  // repeated uint32 q = 5 [packed = true];
  if (this->q_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _q_cached_byte_size_, target);
  }
  for (int i = 0; i < this->q_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->q(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int iq_payload::ByteSize() const {
  int total_size = 0;

  // repeated uint32 i = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->i_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->i(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _i_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 q = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->q_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->q(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _q_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void iq_payload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const iq_payload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const iq_payload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void iq_payload::MergeFrom(const iq_payload& from) {
  GOOGLE_CHECK_NE(&from, this);
  i_.MergeFrom(from.i_);
  q_.MergeFrom(from.q_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void iq_payload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iq_payload::CopyFrom(const iq_payload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iq_payload::IsInitialized() const {

  return true;
}

void iq_payload::Swap(iq_payload* other) {
  if (other != this) {
    i_.Swap(&other->i_);
    q_.Swap(&other->q_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata iq_payload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = iq_payload_descriptor_;
  metadata.reflection = iq_payload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ros_sdr_proto

// @@protoc_insertion_point(global_scope)
