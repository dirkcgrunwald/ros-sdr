// Generated by gencpp from file ros_sdr/hackrf_config.msg
// DO NOT EDIT!


#ifndef ROS_SDR_MESSAGE_HACKRF_CONFIG_H
#define ROS_SDR_MESSAGE_HACKRF_CONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_sdr
{
template <class ContainerAllocator>
struct hackrf_config_
{
  typedef hackrf_config_<ContainerAllocator> Type;

  hackrf_config_()
    : frequency(0)
    , sample_rate(0.0)
    , baseband_filter_bw_hz(0)
    , lnaGain(0)
    , vgaGain(0)
    , txvgaGain(0)
    , ampEnable(0)
    , antennaEnable(0)  {
    }
  hackrf_config_(const ContainerAllocator& _alloc)
    : frequency(0)
    , sample_rate(0.0)
    , baseband_filter_bw_hz(0)
    , lnaGain(0)
    , vgaGain(0)
    , txvgaGain(0)
    , ampEnable(0)
    , antennaEnable(0)  {
    }



   typedef uint64_t _frequency_type;
  _frequency_type frequency;

   typedef double _sample_rate_type;
  _sample_rate_type sample_rate;

   typedef uint32_t _baseband_filter_bw_hz_type;
  _baseband_filter_bw_hz_type baseband_filter_bw_hz;

   typedef uint32_t _lnaGain_type;
  _lnaGain_type lnaGain;

   typedef uint32_t _vgaGain_type;
  _vgaGain_type vgaGain;

   typedef uint32_t _txvgaGain_type;
  _txvgaGain_type txvgaGain;

   typedef int8_t _ampEnable_type;
  _ampEnable_type ampEnable;

   typedef int8_t _antennaEnable_type;
  _antennaEnable_type antennaEnable;




  typedef boost::shared_ptr< ::ros_sdr::hackrf_config_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sdr::hackrf_config_<ContainerAllocator> const> ConstPtr;

}; // struct hackrf_config_

typedef ::ros_sdr::hackrf_config_<std::allocator<void> > hackrf_config;

typedef boost::shared_ptr< ::ros_sdr::hackrf_config > hackrf_configPtr;
typedef boost::shared_ptr< ::ros_sdr::hackrf_config const> hackrf_configConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sdr::hackrf_config_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sdr::hackrf_config_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sdr

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ros_sdr': ['/home/aanderson/ros-sdr/catkin_ws/src/ros_sdr/msg', '/home/aanderson/ros-sdr/catkin_ws/src/ros_sdr/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sdr::hackrf_config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sdr::hackrf_config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sdr::hackrf_config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sdr::hackrf_config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sdr::hackrf_config_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sdr::hackrf_config_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sdr::hackrf_config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5df33ff59a52574b6d910ea12bc909fe";
  }

  static const char* value(const ::ros_sdr::hackrf_config_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5df33ff59a52574bULL;
  static const uint64_t static_value2 = 0x6d910ea12bc909feULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sdr::hackrf_config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sdr/hackrf_config";
  }

  static const char* value(const ::ros_sdr::hackrf_config_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sdr::hackrf_config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 frequency\n\
float64 sample_rate\n\
uint32 baseband_filter_bw_hz	\n\
uint32 lnaGain\n\
uint32 vgaGain\n\
uint32 txvgaGain\n\
int8 ampEnable\n\
int8 antennaEnable\n\
";
  }

  static const char* value(const ::ros_sdr::hackrf_config_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sdr::hackrf_config_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frequency);
      stream.next(m.sample_rate);
      stream.next(m.baseband_filter_bw_hz);
      stream.next(m.lnaGain);
      stream.next(m.vgaGain);
      stream.next(m.txvgaGain);
      stream.next(m.ampEnable);
      stream.next(m.antennaEnable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct hackrf_config_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sdr::hackrf_config_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sdr::hackrf_config_<ContainerAllocator>& v)
  {
    s << indent << "frequency: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.frequency);
    s << indent << "sample_rate: ";
    Printer<double>::stream(s, indent + "  ", v.sample_rate);
    s << indent << "baseband_filter_bw_hz: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.baseband_filter_bw_hz);
    s << indent << "lnaGain: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.lnaGain);
    s << indent << "vgaGain: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.vgaGain);
    s << indent << "txvgaGain: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.txvgaGain);
    s << indent << "ampEnable: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ampEnable);
    s << indent << "antennaEnable: ";
    Printer<int8_t>::stream(s, indent + "  ", v.antennaEnable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SDR_MESSAGE_HACKRF_CONFIG_H
