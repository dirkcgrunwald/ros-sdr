// Generated by gencpp from file ros_sdr/hackrf_config_srvResponse.msg
// DO NOT EDIT!


#ifndef ROS_SDR_MESSAGE_HACKRF_CONFIG_SRVRESPONSE_H
#define ROS_SDR_MESSAGE_HACKRF_CONFIG_SRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_sdr/hackrf_config.h>

namespace ros_sdr
{
template <class ContainerAllocator>
struct hackrf_config_srvResponse_
{
  typedef hackrf_config_srvResponse_<ContainerAllocator> Type;

  hackrf_config_srvResponse_()
    : output()  {
    }
  hackrf_config_srvResponse_(const ContainerAllocator& _alloc)
    : output(_alloc)  {
    }



   typedef  ::ros_sdr::hackrf_config_<ContainerAllocator>  _output_type;
  _output_type output;




  typedef boost::shared_ptr< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct hackrf_config_srvResponse_

typedef ::ros_sdr::hackrf_config_srvResponse_<std::allocator<void> > hackrf_config_srvResponse;

typedef boost::shared_ptr< ::ros_sdr::hackrf_config_srvResponse > hackrf_config_srvResponsePtr;
typedef boost::shared_ptr< ::ros_sdr::hackrf_config_srvResponse const> hackrf_config_srvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sdr

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ros_sdr': ['/home/aanderson/ros-sdr/catkin_ws/src/ros_sdr/msg', '/home/aanderson/ros-sdr/catkin_ws/src/ros_sdr/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22e53c6482b45d72b0680a1186e76397";
  }

  static const char* value(const ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22e53c6482b45d72ULL;
  static const uint64_t static_value2 = 0xb0680a1186e76397ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sdr/hackrf_config_srvResponse";
  }

  static const char* value(const ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sdr/hackrf_config output\n\
\n\
\n\
\n\
================================================================================\n\
MSG: ros_sdr/hackrf_config\n\
uint64 frequency\n\
float64 sample_rate\n\
uint32 baseband_filter_bw_hz	\n\
uint32 lnaGain\n\
uint32 vgaGain\n\
uint32 txvgaGain\n\
int8 ampEnable\n\
int8 antennaEnable\n\
";
  }

  static const char* value(const ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct hackrf_config_srvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sdr::hackrf_config_srvResponse_<ContainerAllocator>& v)
  {
    s << indent << "output: ";
    s << std::endl;
    Printer< ::ros_sdr::hackrf_config_<ContainerAllocator> >::stream(s, indent + "  ", v.output);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SDR_MESSAGE_HACKRF_CONFIG_SRVRESPONSE_H
