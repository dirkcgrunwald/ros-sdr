// Generated by gencpp from file ros_sdr/rtlsdr_config_srvRequest.msg
// DO NOT EDIT!


#ifndef ROS_SDR_MESSAGE_RTLSDR_CONFIG_SRVREQUEST_H
#define ROS_SDR_MESSAGE_RTLSDR_CONFIG_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_sdr/rtlsdr_config.h>

namespace ros_sdr
{
template <class ContainerAllocator>
struct rtlsdr_config_srvRequest_
{
  typedef rtlsdr_config_srvRequest_<ContainerAllocator> Type;

  rtlsdr_config_srvRequest_()
    : input()  {
    }
  rtlsdr_config_srvRequest_(const ContainerAllocator& _alloc)
    : input(_alloc)  {
    }



   typedef  ::ros_sdr::rtlsdr_config_<ContainerAllocator>  _input_type;
  _input_type input;




  typedef boost::shared_ptr< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct rtlsdr_config_srvRequest_

typedef ::ros_sdr::rtlsdr_config_srvRequest_<std::allocator<void> > rtlsdr_config_srvRequest;

typedef boost::shared_ptr< ::ros_sdr::rtlsdr_config_srvRequest > rtlsdr_config_srvRequestPtr;
typedef boost::shared_ptr< ::ros_sdr::rtlsdr_config_srvRequest const> rtlsdr_config_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sdr

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ros_sdr': ['/home/aanderson/ros-sdr/catkin_ws/src/ros_sdr/msg', '/home/aanderson/ros-sdr/catkin_ws/src/ros_sdr/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e51bf68849aa8cee7e9b9dce4a10cc1";
  }

  static const char* value(const ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e51bf68849aa8ceULL;
  static const uint64_t static_value2 = 0xe7e9b9dce4a10cc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sdr/rtlsdr_config_srvRequest";
  }

  static const char* value(const ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sdr/rtlsdr_config input\n\
\n\
================================================================================\n\
MSG: ros_sdr/rtlsdr_config\n\
uint32 frequency\n\
uint32 sample_rate\n\
int32 gain\n\
int32 ppm_error\n\
int8 gainmode\n\
int8 dithering\n\
int8 direct_sampling\n\
";
  }

  static const char* value(const ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.input);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct rtlsdr_config_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sdr::rtlsdr_config_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "input: ";
    s << std::endl;
    Printer< ::ros_sdr::rtlsdr_config_<ContainerAllocator> >::stream(s, indent + "  ", v.input);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SDR_MESSAGE_RTLSDR_CONFIG_SRVREQUEST_H
