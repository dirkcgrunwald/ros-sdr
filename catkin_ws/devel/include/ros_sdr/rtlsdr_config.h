// Generated by gencpp from file ros_sdr/rtlsdr_config.msg
// DO NOT EDIT!


#ifndef ROS_SDR_MESSAGE_RTLSDR_CONFIG_H
#define ROS_SDR_MESSAGE_RTLSDR_CONFIG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_sdr
{
template <class ContainerAllocator>
struct rtlsdr_config_
{
  typedef rtlsdr_config_<ContainerAllocator> Type;

  rtlsdr_config_()
    : frequency(0)
    , sample_rate(0)
    , gain(0)
    , ppm_error(0)
    , gainmode(0)
    , dithering(0)
    , direct_sampling(0)  {
    }
  rtlsdr_config_(const ContainerAllocator& _alloc)
    : frequency(0)
    , sample_rate(0)
    , gain(0)
    , ppm_error(0)
    , gainmode(0)
    , dithering(0)
    , direct_sampling(0)  {
    }



   typedef uint32_t _frequency_type;
  _frequency_type frequency;

   typedef uint32_t _sample_rate_type;
  _sample_rate_type sample_rate;

   typedef int32_t _gain_type;
  _gain_type gain;

   typedef int32_t _ppm_error_type;
  _ppm_error_type ppm_error;

   typedef int8_t _gainmode_type;
  _gainmode_type gainmode;

   typedef int8_t _dithering_type;
  _dithering_type dithering;

   typedef int8_t _direct_sampling_type;
  _direct_sampling_type direct_sampling;




  typedef boost::shared_ptr< ::ros_sdr::rtlsdr_config_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_sdr::rtlsdr_config_<ContainerAllocator> const> ConstPtr;

}; // struct rtlsdr_config_

typedef ::ros_sdr::rtlsdr_config_<std::allocator<void> > rtlsdr_config;

typedef boost::shared_ptr< ::ros_sdr::rtlsdr_config > rtlsdr_configPtr;
typedef boost::shared_ptr< ::ros_sdr::rtlsdr_config const> rtlsdr_configConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_sdr::rtlsdr_config_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_sdr::rtlsdr_config_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_sdr

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ros_sdr': ['/home/aanderson/ros-sdr/catkin_ws/src/ros_sdr/msg', '/home/aanderson/ros-sdr/catkin_ws/src/ros_sdr/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_sdr::rtlsdr_config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_sdr::rtlsdr_config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sdr::rtlsdr_config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_sdr::rtlsdr_config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sdr::rtlsdr_config_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_sdr::rtlsdr_config_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_sdr::rtlsdr_config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "188b8912642464c74a1ab30117856134";
  }

  static const char* value(const ::ros_sdr::rtlsdr_config_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x188b8912642464c7ULL;
  static const uint64_t static_value2 = 0x4a1ab30117856134ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_sdr::rtlsdr_config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_sdr/rtlsdr_config";
  }

  static const char* value(const ::ros_sdr::rtlsdr_config_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_sdr::rtlsdr_config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 frequency\n\
uint32 sample_rate\n\
int32 gain\n\
int32 ppm_error\n\
int8 gainmode\n\
int8 dithering\n\
int8 direct_sampling\n\
";
  }

  static const char* value(const ::ros_sdr::rtlsdr_config_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_sdr::rtlsdr_config_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frequency);
      stream.next(m.sample_rate);
      stream.next(m.gain);
      stream.next(m.ppm_error);
      stream.next(m.gainmode);
      stream.next(m.dithering);
      stream.next(m.direct_sampling);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct rtlsdr_config_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_sdr::rtlsdr_config_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_sdr::rtlsdr_config_<ContainerAllocator>& v)
  {
    s << indent << "frequency: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frequency);
    s << indent << "sample_rate: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sample_rate);
    s << indent << "gain: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gain);
    s << indent << "ppm_error: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ppm_error);
    s << indent << "gainmode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gainmode);
    s << indent << "dithering: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dithering);
    s << indent << "direct_sampling: ";
    Printer<int8_t>::stream(s, indent + "  ", v.direct_sampling);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SDR_MESSAGE_RTLSDR_CONFIG_H
