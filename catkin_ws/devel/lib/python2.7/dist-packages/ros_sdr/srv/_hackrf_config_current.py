# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sdr/hackrf_config_currentRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class hackrf_config_currentRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "ros_sdr/hackrf_config_currentRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hackrf_config_currentRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sdr/hackrf_config_currentResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sdr.msg

class hackrf_config_currentResponse(genpy.Message):
  _md5sum = "22e53c6482b45d72b0680a1186e76397"
  _type = "ros_sdr/hackrf_config_currentResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ros_sdr/hackrf_config output



================================================================================
MSG: ros_sdr/hackrf_config
uint64 frequency
float64 sample_rate
uint32 baseband_filter_bw_hz	
uint32 lnaGain
uint32 vgaGain
uint32 txvgaGain
int8 ampEnable
int8 antennaEnable

"""
  __slots__ = ['output']
  _slot_types = ['ros_sdr/hackrf_config']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       output

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hackrf_config_currentResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.output is None:
        self.output = ros_sdr.msg.hackrf_config()
    else:
      self.output = ros_sdr.msg.hackrf_config()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_Qd4I2b.pack(_x.output.frequency, _x.output.sample_rate, _x.output.baseband_filter_bw_hz, _x.output.lnaGain, _x.output.vgaGain, _x.output.txvgaGain, _x.output.ampEnable, _x.output.antennaEnable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.output is None:
        self.output = ros_sdr.msg.hackrf_config()
      end = 0
      _x = self
      start = end
      end += 34
      (_x.output.frequency, _x.output.sample_rate, _x.output.baseband_filter_bw_hz, _x.output.lnaGain, _x.output.vgaGain, _x.output.txvgaGain, _x.output.ampEnable, _x.output.antennaEnable,) = _struct_Qd4I2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_Qd4I2b.pack(_x.output.frequency, _x.output.sample_rate, _x.output.baseband_filter_bw_hz, _x.output.lnaGain, _x.output.vgaGain, _x.output.txvgaGain, _x.output.ampEnable, _x.output.antennaEnable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.output is None:
        self.output = ros_sdr.msg.hackrf_config()
      end = 0
      _x = self
      start = end
      end += 34
      (_x.output.frequency, _x.output.sample_rate, _x.output.baseband_filter_bw_hz, _x.output.lnaGain, _x.output.vgaGain, _x.output.txvgaGain, _x.output.ampEnable, _x.output.antennaEnable,) = _struct_Qd4I2b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Qd4I2b = struct.Struct("<Qd4I2b")
class hackrf_config_current(object):
  _type          = 'ros_sdr/hackrf_config_current'
  _md5sum = '22e53c6482b45d72b0680a1186e76397'
  _request_class  = hackrf_config_currentRequest
  _response_class = hackrf_config_currentResponse
