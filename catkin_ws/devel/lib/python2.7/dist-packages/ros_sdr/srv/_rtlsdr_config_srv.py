# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sdr/rtlsdr_config_srvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sdr.msg

class rtlsdr_config_srvRequest(genpy.Message):
  _md5sum = "1e51bf68849aa8cee7e9b9dce4a10cc1"
  _type = "ros_sdr/rtlsdr_config_srvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ros_sdr/rtlsdr_config input

================================================================================
MSG: ros_sdr/rtlsdr_config
uint32 frequency
uint32 sample_rate
int32 gain
int32 ppm_error
int8 gainmode
int8 dithering
int8 direct_sampling

"""
  __slots__ = ['input']
  _slot_types = ['ros_sdr/rtlsdr_config']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rtlsdr_config_srvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.input is None:
        self.input = ros_sdr.msg.rtlsdr_config()
    else:
      self.input = ros_sdr.msg.rtlsdr_config()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I2i3b.pack(_x.input.frequency, _x.input.sample_rate, _x.input.gain, _x.input.ppm_error, _x.input.gainmode, _x.input.dithering, _x.input.direct_sampling))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.input is None:
        self.input = ros_sdr.msg.rtlsdr_config()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.input.frequency, _x.input.sample_rate, _x.input.gain, _x.input.ppm_error, _x.input.gainmode, _x.input.dithering, _x.input.direct_sampling,) = _struct_2I2i3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I2i3b.pack(_x.input.frequency, _x.input.sample_rate, _x.input.gain, _x.input.ppm_error, _x.input.gainmode, _x.input.dithering, _x.input.direct_sampling))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.input is None:
        self.input = ros_sdr.msg.rtlsdr_config()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.input.frequency, _x.input.sample_rate, _x.input.gain, _x.input.ppm_error, _x.input.gainmode, _x.input.dithering, _x.input.direct_sampling,) = _struct_2I2i3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I2i3b = struct.Struct("<2I2i3b")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_sdr/rtlsdr_config_srvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_sdr.msg

class rtlsdr_config_srvResponse(genpy.Message):
  _md5sum = "daa827d21c973de634da209411f7e279"
  _type = "ros_sdr/rtlsdr_config_srvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ros_sdr/rtlsdr_config output



================================================================================
MSG: ros_sdr/rtlsdr_config
uint32 frequency
uint32 sample_rate
int32 gain
int32 ppm_error
int8 gainmode
int8 dithering
int8 direct_sampling

"""
  __slots__ = ['output']
  _slot_types = ['ros_sdr/rtlsdr_config']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       output

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rtlsdr_config_srvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.output is None:
        self.output = ros_sdr.msg.rtlsdr_config()
    else:
      self.output = ros_sdr.msg.rtlsdr_config()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I2i3b.pack(_x.output.frequency, _x.output.sample_rate, _x.output.gain, _x.output.ppm_error, _x.output.gainmode, _x.output.dithering, _x.output.direct_sampling))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.output is None:
        self.output = ros_sdr.msg.rtlsdr_config()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.output.frequency, _x.output.sample_rate, _x.output.gain, _x.output.ppm_error, _x.output.gainmode, _x.output.dithering, _x.output.direct_sampling,) = _struct_2I2i3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I2i3b.pack(_x.output.frequency, _x.output.sample_rate, _x.output.gain, _x.output.ppm_error, _x.output.gainmode, _x.output.dithering, _x.output.direct_sampling))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.output is None:
        self.output = ros_sdr.msg.rtlsdr_config()
      end = 0
      _x = self
      start = end
      end += 19
      (_x.output.frequency, _x.output.sample_rate, _x.output.gain, _x.output.ppm_error, _x.output.gainmode, _x.output.dithering, _x.output.direct_sampling,) = _struct_2I2i3b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I2i3b = struct.Struct("<2I2i3b")
class rtlsdr_config_srv(object):
  _type          = 'ros_sdr/rtlsdr_config_srv'
  _md5sum = '890ecb4c989c644f8aa7973610d1e673'
  _request_class  = rtlsdr_config_srvRequest
  _response_class = rtlsdr_config_srvResponse
